<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript面试题</title>
      <link href="/2022/10/07/javascript%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/10/07/javascript%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前端面试题——JavaScript"><a href="#前端面试题——JavaScript" class="headerlink" title="前端面试题——JavaScript"></a>前端面试题——JavaScript</h1><h2 id="JavaScript中的8种数据类型及区别"><a href="#JavaScript中的8种数据类型及区别" class="headerlink" title="JavaScript中的8种数据类型及区别"></a>JavaScript中的8种数据类型及区别</h2><p>包括值类型（基本对象类型）和引用类型（复杂对象类型）</p><p>基本对象类型（值类型）：Number、String、Boolean、Symbol、null、undefined在内存中占据固定大小，保存在栈内存中</p><p>引用类型（复杂对象类型）：Object、Function、Array、Date、RegExp、特殊的基本包装类型（String、Number、Boolean）以及单体内内置对象（Global、Math）等引用类型的值是对象，保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><p>使用场景：</p><p>Symbol：使用Symbol来作为对象属性名(key) 利用该特性，把一些不需要对外操作和访问的属性使用Symbol来定义</p><p>BigInt：由于在 Number 与 BigInt 之间进行转换会损失精度，因而建议仅在值可能大于253 时使用 BigInt 类型，并且不在两种类型之间进行相互转换。</p><h2 id="JavaScript中的数据类型检测方案"><a href="#JavaScript中的数据类型检测方案" class="headerlink" title="JavaScript中的数据类型检测方案"></a>JavaScript中的数据类型检测方案</h2><ol><li><p>typeof<br>优点：能够快速区分基本数据类型<br>缺点：不能将Object、Array和null区分看，都返回object</p></li><li><p>instanceof<br>有点：能够区分Array、Object和Function，适合用于判断自定义的类实例对象<br>缺点：Number、Boolean、String基本数据数据类型不能判断</p></li><li><p>Object.prototype.call()<br>优点：精准判断数据类型<br>缺点：写法繁琐不易记</p></li></ol><h3 id="instanceof的作用"><a href="#instanceof的作用" class="headerlink" title="instanceof的作用"></a>instanceof的作用</h3><p>用于判断一个引用数据类型是否属于某构造函数<br>还可以在继承关系中用来判断一个实例是否属于他的父类型</p><h3 id="instanceof和typeof的区别"><a href="#instanceof和typeof的区别" class="headerlink" title="instanceof和typeof的区别"></a>instanceof和typeof的区别</h3><p>typeof在对值类型number、string、boolean 、null 、 undefined、 以及引用类型的function的反应是精准的；但是，对于对象{ } 、数组[ ] 、null 都会返回object</p><p>为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。</p><h2 id="var-amp-amp-let-amp-amp-const"><a href="#var-amp-amp-let-amp-amp-const" class="headerlink" title="var&amp;&amp;let&amp;&amp;const"></a>var&amp;&amp;let&amp;&amp;const</h2><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><ol><li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。<br>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，且不能修改。</li><li>var可以先使用，后声明，因为存在变量提升；let必须先声明后使用。</li><li>var是允许在相同作用域内重复声明同一个变量的，而let与const不允许这一现象。</li><li>在全局上下文中，基于let声明的全局变量和全局对象GO（window）没有任何关系 ;<br>var声明的变量会和GO有映射关系；</li><li>会产生暂时性死区：</li><li>let &#x2F;const&#x2F;function会把当前所在的大括号(除函数之外)作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于let的块作用特征即可解决</li></ol><h2 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h2><p>创建函数的时候，已经声明了当前函数的作用域&#x3D;&#x3D;&gt;当前创建函数所处的上下文。如果是在全局下创建的函数就是[[scope]]:EC(G)，函数执行的时候，形成一个全新的私有上下文EC(FN)，供字符串代码执行(进栈执行)</p><p>定义：简单来说作用域就是变量与函数的可访问范围，由当前环境与上层环境的一系列变量对象组成<br>1.全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。<br>2.函数作用域：在固定的代码片段才能被访问</p><p>作用：作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</p><p><strong>作用域链参考链接</strong>一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h2 id="闭包的两大作用：保护-x2F-保存"><a href="#闭包的两大作用：保护-x2F-保存" class="headerlink" title="闭包的两大作用：保护&#x2F;保存"></a>闭包的两大作用：保护&#x2F;保存</h2><p>闭包的概念<br>函数执行时形成的私有上下文EC(FN)，正常情况下，代码执行完会出栈后释放;但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：</p><p>保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；</p><p>保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；</p><p><strong>稍全面的回答</strong>：在js中变量的作用域属于函数作用域, 在函数执行完后,作用域就会被清理,内存也会随之被回收,但是由于闭包函数是建立在函数内部的子函数, 由于其可访问上级作用域,即使上级函数执行完, 作用域也不会随之销毁, 这时的子函数(也就是闭包),便拥有了访问上级作用域中变量的权限,即使上级函数执行完后作用域内的值也不会被销毁。</p><p><strong>闭包的特性</strong></p><ul><li><p>内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁)设计私有的方法和变量，避免全局变量的污染。</p></li><li><p>闭包是密闭的容器，，类似于set、map容器，存储数据的</p></li><li><p>闭包是一个对象，存放数据的格式为 key-value 形式</p></li><li><p>函数嵌套函数</p></li><li><p>本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除</p></li><li><p>闭包形成的条件</p><ul><li>函数的嵌套</li><li>内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</li></ul></li><li><p>闭包的用途</p><ul><li>模仿块级作用域</li><li>保护外部函数的变量 能够访问函数定义时所在的词法作用域(阻止其被回收)</li><li>封装私有化变量</li><li>创建模块</li></ul></li><li><p>闭包应用场景</p><p>闭包的两个场景，闭包的两大作用：保存&#x2F;保护。 在开发中, 其实我们随处可见闭包的身影, 大部分前端JavaScript 代码都是“事件驱动”的,即一个事件绑定的回调方法; 发送ajax请求成功|失败的回调;setTimeout的延时回调;或者一个函数内部返回另一个匿名函数,这些都是闭包的应用。</p></li><li><p>闭包的优点：延长局部变量的生命周期</p></li><li><p>闭包的缺点：会导致函数的变量一直保存在内存中，过多的闭包可能导致内存泄漏</p></li></ul><h2 id="JavaScript中this的情况"><a href="#JavaScript中this的情况" class="headerlink" title="JavaScript中this的情况"></a>JavaScript中this的情况</h2><ol><li>普通函数调用：通过函数名()直接调用：this指向全局对象window（注意let定义的变量不是window属性，只有window.xxx定义的才是。即let a &#x3D;’aaa’; this.a是undefined）</li><li>构造函数调用：函数作为构造函数，用new关键字调用时：this指向新new出的对象</li><li>对象函数调用：通过对象.函数名()调用的：this指向这个对象</li><li>箭头函数调用：箭头函数里面没有 this ，所以永远是上层作用域this（上下文）</li><li>apply和call调用：函数体内 this 的指向的是 call&#x2F;apply 方法第一个参数，若为空默认是指向全局对象window。</li><li>函数作为数组的一个元素，通过数组下标调用的：this指向这个数组</li><li>函数作为window内置函数的回调函数调用：this指向window（如setInterval setTimeout 等）</li></ol><h2 id="call-x2F-apply-x2F-bind的区别"><a href="#call-x2F-apply-x2F-bind的区别" class="headerlink" title="call&#x2F;apply&#x2F;bind的区别"></a>call&#x2F;apply&#x2F;bind的区别</h2><h3 id="相同："><a href="#相同：" class="headerlink" title="相同："></a>相同：</h3><ol><li>都是用来改变函数的this对象的指向的</li><li>第一个参数都是this要指向的对象</li><li>都可以利用后续参数传参</li></ol><h3 id="不同："><a href="#不同：" class="headerlink" title="不同："></a>不同：</h3><p>​    apply和call传入的参数列表形式不同。apply接收arguments，call接收一串参数列表<br>​    fn.call(obj, 1, 2)<br>​    fn.apply(obj, [1, 2])</p><p><strong>bind</strong>：语法和call一模一样，区别在于立即执行还是等待执行，不兼容IS6~8 主要就是将函数绑定到某个对象，bind()会创建一个函数，返回对应函数便于后续调用；而apply和call是立即调用。</p><p><strong>总结</strong>：基于Function.prototype上的apply、call和bind调用模式，这三者都可以显示调用函数的this指向。apply接收数组参数，call接收参数列表，bind方法通过传入一个对象，返回this绑定了传入对象的函数。这个函数的this指向除了使用new时会被改变，其他情况不会被改变。若为空默认时指向全局对象window。</p><h2 id="箭头函数的特性"><a href="#箭头函数的特性" class="headerlink" title="箭头函数的特性"></a>箭头函数的特性</h2><ol><li>箭头函数没有自己的this，会捕获其所在的上下文的this值，作为自己的this值</li><li>箭头函数没有constructor，是匿名函数，不能作为构造函数，不能通过new 调用；</li><li>没有new.target 属性。在通过new运算符被初始化的函数或构造方法中，new.target返回一个指向构造方法或函数的引用。在普通的函数调用中，new.target 的值是undefined</li><li>箭头函数不绑定Arguments 对象。取而代之用rest参数…解决。由于 箭头函数没有自己的this指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立）</li><li>箭头函数通过 call() 或 apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。</li><li>箭头函数没有原型属性 Fn.prototype 值为 undefined</li><li>箭头函数不能当做Generator函数,不能使用yield关键字</li></ol><h2 id="原型-amp-amp-原型链"><a href="#原型-amp-amp-原型链" class="headerlink" title="原型 &amp;&amp; 原型链"></a>原型 &amp;&amp; 原型链</h2><h3 id="原型关系"><a href="#原型关系" class="headerlink" title="原型关系"></a>原型关系</h3><p>每个clss、Function都有显示原型prototype<br>每个实例都有隐式原型__proto__<br>实例的__proto__指向对应Function的prototype</p><p><strong>原型</strong>：在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个函数对象都有一个prototype 属性，这个属性指向函数的原型对象。</p><p><strong>原型链</strong>：函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ &#x3D; null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范</p><p><strong>特点</strong>：JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p><h3 id="new运算符的实现机制"><a href="#new运算符的实现机制" class="headerlink" title="new运算符的实现机制"></a>new运算符的实现机制</h3><ol><li><p>首先创建了一个新的空对象</p></li><li><p>设置原型，将对象的原型设置为函数的prototype对象。</p></li><li><p>让函数的this指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p></li><li><p>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p></li></ol><h2 id="EventLoop事件循环"><a href="#EventLoop事件循环" class="headerlink" title="EventLoop事件循环"></a>EventLoop事件循环</h2><p>JS是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，Promise.then，MutationObserver，宏任务的话就是setImmediate setTimeout setInterval</p><p>JS运行的环境。一般为浏览器或者Node。 在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。 Node环境中，只有JS 线程。 不同环境执行机制有差异，不同任务进入不同Event Queue队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。</p><h3 id="浏览器中的事件循环"><a href="#浏览器中的事件循环" class="headerlink" title="浏览器中的事件循环"></a>浏览器中的事件循环</h3><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><p>宿主环境提供的，比如浏览器ajax、setTimeout、setInterval、setTmmediate(只兼容ie)、script、requestAnimationFrame、messageChannel、UI渲染、一些浏览器api</p><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><p>语言本身提供的，比如promise.then、queueMicrotask(基于then)、mutationObserver(浏览器提供)、messageChannel 、mutationObersve</p><h3 id="Node环境中的事件循环"><a href="#Node环境中的事件循环" class="headerlink" title="Node环境中的事件循环"></a>Node环境中的事件循环</h3><p>Node是基于V8引擎的运行在服务端的JavaScript运行环境，在处理高并发、I&#x2F;O密集(文件操作、网络操作、数据库操作等)场景有明显的优势。虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I&#x2F;O，比如新的网络连接等，所以Node的Event Loop(事件环机制)与浏览器的是不太一样。</p><p><strong>timers</strong>: 计时器，执行setTimeout和setInterval的回调</p><p><strong>pending callbacks</strong>: 执行延迟到下一个循环迭代的 I&#x2F;O 回调</p><p><strong>idle, prepare</strong>: 队列的移动，仅系统内部使用</p><p><strong>poll轮询</strong>: 检索新的 I&#x2F;O 事件;执行与 I&#x2F;O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</p><p><strong>check</strong>: 执行setImmediate回调，setImmediate在这里执行</p><p><strong>close callbacks</strong>: 执行close事件的callback，一些关闭的回调函数，如：socket.on(‘close’, …)</p><h2 id="setTimeout、Promise、Async-x2F-Await的区别"><a href="#setTimeout、Promise、Async-x2F-Await的区别" class="headerlink" title="setTimeout、Promise、Async&#x2F;Await的区别"></a>setTimeout、Promise、Async&#x2F;Await的区别</h2><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise本身是<strong>同步的立即执行函数</strong>， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then&#x2F;catch等，当主栈完成后，才会去调用resolve&#x2F;reject中存放的方法执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token keyword">let</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1 end'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'settimeout'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment">// 输出顺序：script start->async1 start->async2->script end->async1 end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Async-x2F-Await-如何通过同步的方式实现异步"><a href="#Async-x2F-Await-如何通过同步的方式实现异步" class="headerlink" title="Async&#x2F;Await 如何通过同步的方式实现异步"></a>Async&#x2F;Await 如何通过同步的方式实现异步</h3><p>Async&#x2F;Await就是一个<strong>自执行</strong>的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式,第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个promise对象.</p><h2 id="介绍节流防抖原理、区别以及应用"><a href="#介绍节流防抖原理、区别以及应用" class="headerlink" title="介绍节流防抖原理、区别以及应用"></a>介绍节流防抖原理、区别以及应用</h2><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。</p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><strong>节流</strong>：滚动加载更多、搜索框搜的索联想功能、高频点击、表单重复提交……</p><p><strong>防抖</strong>：搜索框搜索输入，并在输入完以后自动搜索、手机号，邮箱验证输入检测、窗口大小 resize 变化后，再重新渲染。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 节流函数 一个函数执行一次后，只有大于设定的执行周期才会执行第二次。有个需要频繁触发的函数，出于优化性能的角度，在规定时间内，只让函数触发的第一次生效，后面的不生效。 * @param fn要被节流的函数 * @param delay规定的时间 */</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//记录上一次函数触发的时间</span>    <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//记录当前函数触发的时间</span>        <span class="token keyword">var</span> nowTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">></span> delay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//修正this指向问题</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//同步执行结束时间</span>            lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'scllor事件被触发了'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/** * 防抖函数  一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效 * @param fn要被节流的函数 * @param delay规定的时间 */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//记录上一次的延时器</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//清除上一次的演示器</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重新设置新的延时器</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//修正this指向问题</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'按钮被点击了'</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器原理</title>
      <link href="/2022/09/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2022/09/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>全称：超文本传输协议（HyperText Transfer Protocol）</p><p>概念：<code>HTTP</code> 是一种能够获取像 <code>HTML</code>、图片等网络资源的通讯协议（<code>protocol</code>）。它是在 <code>web</code> 上进行数据交换的基础，是一种 <code>client-server</code> 协议。</p><p><strong>HTTP是TCP&#x2F;IP协议簇的最高层–应用层协议</strong></p><h3 id="http的基础特性"><a href="#http的基础特性" class="headerlink" title="http的基础特性"></a>http的基础特性</h3><ul><li><p>可拓展协议。<code>HTTP 1.0</code> 出现的 <code>HTTP headers</code> 让协议拓展变得更加的容易。只要服务端和客户端就 <code>headers</code> 达成语义一致，新功能就可以被轻松的加入进来</p></li><li><p><code>HTTP</code> 是无状态的、有会话的。</p></li><li><p><code>HTTP</code> 与连接。通过 <code>TCP</code>，或者 <code>TLS</code>——加密的 <code>TCP</code> 连接来发送，理论上任何可靠的传输协议都可以使用。连接是传输层控制的，这从根本上来讲不是 <code>HTTP</code> 的范畴。</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005172354186.png" alt="http"></p><h3 id="基于http的组件系统"><a href="#基于http的组件系统" class="headerlink" title="基于http的组件系统"></a>基于http的组件系统</h3><p>http的组件系统包括客户端、web服务器和代理</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005172612352.png" alt="http的组件系统"></p><h4 id="客户端：user-agent"><a href="#客户端：user-agent" class="headerlink" title="客户端：user-agent"></a>客户端：user-agent</h4><h4 id="web服务端"><a href="#web服务端" class="headerlink" title="web服务端"></a>web服务端</h4><h4 id="代理（Proxies）"><a href="#代理（Proxies）" class="headerlink" title="代理（Proxies）"></a>代理（Proxies）</h4><p>应用层的作用：</p><ul><li>缓存</li><li>过滤（像防病毒扫描、家长控制）</li><li>负载均衡</li><li>认证（对不同的资源进行权限控制）</li><li>日志管理</li></ul></li></ul><h3 id="http报文组成"><a href="#http报文组成" class="headerlink" title="http报文组成"></a>http报文组成</h3><p>http有两种类型消息</p><ul><li><p>请求：由客户端发送用来出发服务器上的动作</p></li><li><p>响应：来自服务器的应答</p><h4 id="http请求和响应"><a href="#http请求和响应" class="headerlink" title="http请求和响应"></a>http请求和响应</h4><p>请求和响应都包含起始行、请求头、空行以及body部分</p></li></ul><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><p>缓存：get能缓存，post不能</p><p>安全：get没有post安全，因为请求全在URL中，且会被浏览器保存历史记录，post放在请求体中，会更加安全</p><p>限制：URL有长度限制，会干预get请求，有浏览器决定</p><p>编码：get请求只能进行URL编码，只能接收ASCII字符，post没有限制，post不对数据类型做限制</p><p>get会把请求报文一次性发出去，postHi分为两个TCP数据包，首先发header部分，如果服务器响应100，然后发body部分。</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li><p>100~199——信息性状态码</p><p>101 Switching Protocols。在HTTP升级为WebSocket的时候，如果服务器同意变更，就会发送状态码 101。</p></li><li><p>200~299——成功状态码</p><p>200 OK，表示从客户端发来的请求在服务器端被正确处理</p><p>204 No content，表示请求成功，但响应报文不含实体的主体部分</p><p>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</p><p>206 Partial Content，进行范围请求</p></li><li><p>300~399——重定向状态码</p><p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</p><p>302 found，临时性重定向，表示资源临时被分配了新的 URL</p><p>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</p><p>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</p><p>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p></li><li><p>400~499——客户端错误状态码</p><p>400 bad request，请求报文存在语法错误</p><p>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</p><p>403 forbidden，表示对请求资源的访问被服务器拒绝</p><p>404 not found，表示在服务器上没有找到请求的资源</p></li><li><p>500~599——服务器错误状态码</p><p>500 internal sever error，表示服务器端在执行请求时发生了错误</p><p>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</p><p>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p></li></ul><h3 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h3><h4 id="http-headers"><a href="#http-headers" class="headerlink" title="http headers"></a>http headers</h4><p>1.通用首部（<code>General headers</code>）同时适用于请求和响应消息，但与最终消息主体中传输的数据无关的消息头。如 <code>Date</code></p><p>2.请求首部（<code>Request headers</code>）包含更多有关要获取的资源或客户端本身信息的消息头。如 User-Agent</p><p>3.响应首部（<code>Response headers</code>）包含有关响应的补充信息</p><p>4.实体首部（<code>Entity headers</code>）含有关实体主体的更多信息，比如主体长(<code>Content-Length</code>)度或其 <code>MIME</code> 类型。如 <code>Accept-Ranges</code></p><h2 id="http的前世今生"><a href="#http的前世今生" class="headerlink" title="http的前世今生"></a>http的前世今生</h2><p>在 1991 年发布了 <code>HTTP 0.9</code> 版，在 1996 年发布 1.0 版，1997 年是 1.1 版，1.1 版也是到今天为止传输最广泛的版本。2015 年发布了 2.0 版，其极大的优化了 <code>HTTP/1.1</code> 的性能和安全性，而 2018 年发布的 3.0 版，继续优化 <code>HTTP/2</code>，激进地使用 <code>UDP</code> 取代 <code>TCP</code> 协议，目前，<code>HTTP/3</code> 在 2019 年 9 月 26 日 被 <code>Chrome</code>，<code>Firefox</code>，和 <code>Cloudflare</code> 支持</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005202137544.png" alt="http发展历程"></p><h3 id="http-0-9"><a href="#http-0-9" class="headerlink" title="http 0.9"></a>http 0.9</h3><p>单行协议，请求由单行指令构成。以唯一可用的方法 <code>GET</code> 开头。后面跟的是目标资源的路径</p><p>没有响应头，只传输HTML文件，没有状态码</p><h3 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http 1.0"></a>http 1.0</h3><ul><li>协议版本信息会随着每个请求发送</li><li>响应状态码</li><li>引入了 <code>HTTP</code> 头的概念，无论是请求还是拓展，允许传输元数据。使协议变得灵活，更加具有拓展性</li><li><code>Content-Type</code> 请求头，具备了传输除纯文本 <code>HTML</code> 文件以外其他类型文档的能力 在响应中，<code>Content-Type</code> 标头告诉客户端实际返回的内容的内容类型</li></ul><p>媒体类型是一种标准。用来表示文档、文件或者字节流的性质和格式。浏览器通常使用 <code>MIME</code> （<code>Multipurpose Internet Mail Extensions</code> ）类型来确定如何处理 <code>URL</code>，因此 <code>Web</code> 服务器在响应头中配置正确的 <code>MIME</code> 类型会非常的重要。如果配置不正确，可能会导致网站无法正常的工作。<code>MIME</code> 的组成结构非常简单；由类型与子类型两个字符串中间用’&#x2F;‘分隔而组成。</p><p><code>HTTP</code> 从 <code>MIME type</code> 取了一部分来标记报文 <code>body</code> 部分的数据类型，这些类型体现在<code>Content-Type</code> 这个字段，当然这是针对于发送端而言，接收端想要收到特定类型的数据，也可以用 <code>Accept</code> 字段。</p><p>这两个字段的取值可以分为下面几类:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span> text：text<span class="token operator">/</span>html<span class="token punctuation">,</span> text<span class="token operator">/</span>plain<span class="token punctuation">,</span> text<span class="token operator">/</span>css 等<span class="token operator">-</span> image<span class="token operator">:</span> image<span class="token operator">/</span>gif<span class="token punctuation">,</span> image<span class="token operator">/</span>jpeg<span class="token punctuation">,</span> image<span class="token operator">/</span>png 等<span class="token operator">-</span> audio<span class="token operator">/</span>video<span class="token operator">:</span> audio<span class="token operator">/</span>mpeg<span class="token punctuation">,</span> video<span class="token operator">/</span>mp4 等<span class="token operator">-</span> application<span class="token operator">:</span> application<span class="token operator">/</span>json<span class="token punctuation">,</span> application<span class="token operator">/</span>javascript<span class="token punctuation">,</span> application<span class="token operator">/</span>pdf<span class="token punctuation">,</span> application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时为了约定请求的数据和响应数据的压缩方式、支持语言、字符集等，还提出了以下的 <code>Header</code></p><p>1.压缩方式:发送端：<code>Content-Encoding</code>（服务端告知客户端，服务器对实体的主体部分的编码方式） 和 接收端：<code>Accept-Encoding</code>（用户代理支持的编码方式），值有 gzip: 当今最流行的压缩格式；deflate: 另外一种著名的压缩格式；br: 一种专门为 HTTP 发明的压缩算法</p><p>2.支持语言：<code>Content-Language</code> 和 <code>Accept-Language</code>（用户代理支持的自然语言集）</p><p>3.字符集：发送端：<code>Content-Type</code> 中，以 <code>charset</code> 属性指定。接收端：<code>Accept-Charset</code>（用户代理支持的字符集）。</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005184951741.png" alt="image-20221005184951741"></p><p><code>HTTP/1.0</code> 版的主要缺点是，每个 <code>TCP</code> 连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。<code>TCP</code> 连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢（<code>slow start</code>）。</p><h3 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http 1.1"></a>http 1.1</h3><ul><li>连接可以复用。长连接：<code>connection: keep-alive</code>。<code>HTTP 1.1</code> 支持长连接（<code>PersistentConnection</code>），在一个 <code>TCP</code> 连接上可以传送多个 <code>HTTP</code> 请求和响应，减少了建立和关闭连接的消耗和延迟，在 <code>HTTP1.1</code> 中默认开启 <code>Connection：keep-alive</code>，一定程度上弥补了 <code>HTTP1.0</code> 每次请求都要创建连接的缺点。</li><li>增加了管道化技术（<code>HTTP Pipelinling</code>），允许在第一个应答被完全发送完成之前就发送第二个请求，以降低通信延迟。复用同一个 <code>TCP</code> 连接期间，即便是通过管道同时发送了多个请求，服务端也是按请求的顺序依次给出响应的；而客户端在未收到之前所发出所有请求的响应之前，将会阻塞后面的请求(排队等待)，这称为”队头堵塞”（<code>Head-of-line blocking</code>）。</li><li>支持响应分块，分块编码传输：<code>Transfer-Encoding: chunked``Content-length</code> 声明本次响应的数据长度。<code>keep-alive</code> 连接可以先后传送多个响应，因此用 <code>Content-length</code> 来区分数据包是属于哪一个响应。使用 <code>Content-Length</code> 字段的前提条件是，服务器发送响应之前，必须知道响应的数据长度。对于一些很耗时的动态操作来说，这意味着，服务器要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用”流模式”（<code>Stream</code>）取代”缓存模式”（<code>Buffer</code>）。因此，<code>HTTP 1.1</code> 规定可以不使用 <code>Content-Length</code> 字段，而使用”分块传输编码”（<code>Chunked Transfer Encoding</code>）。只要请求或响应的头信息有 <code>Transfer-Encoding: chunked</code> 字段，就表明 <code>body</code> 将可能由数量未定的多个数据块组成。每个数据块之前会有一行包含一个 16 进制数值，表示这个块的长度；最后一个大小为 0 的块，就表示本次响应的数据发送完了。</li><li>引入额外的缓存控制机制。在 <code>HTTP1.0</code> 中主要使用 <code>header</code> 里的 <code>If-Modified-Since</code>,<code>Expires</code> 等来做为缓存判断的标准，<code>HTTP1.1</code> 则引入了更多的缓存控制策略例如 <code>Entity tag</code>, <code>If-None-Match</code>，<code>Cache-Control</code> 等更多可供选择的缓存头来控制缓存策略。</li><li><code>Host</code> 头。不同的域名配置同一个 <code>IP</code> 地址的服务器。<code>Host</code> 是 <code>HTTP 1.1</code> 协议中新增的一个请求头，主要用来实现虚拟主机技术。</li></ul><h3 id="http-2-0"><a href="#http-2-0" class="headerlink" title="http  2.0"></a>http  2.0</h3><p><code>HTTP/2</code> 是二进制协议而不是文本协议。</p><ul><li>帧：客户端与服务器通过交换帧来通信，帧是基于这个新协议通信的最小单位。</li><li>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。</li><li>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符</li></ul><p><code>HTTP 2.0</code> 中的帧将 <code>HTTP/1.x</code> 消息分成帧并嵌入到流 (<code>stream</code>) 中。数据帧和报头帧分离，这将允许报头压缩。将多个流组合，这是一个被称为多路复用 (<code>multiplexing</code>) 的过程，它允许更有效的底层 <code>TCP</code> 连接。</p><p>在 <code>HTTP/2</code> 中，这是一个在  <code>HTTP/1.1</code> 和底层传输协议之间附加的步骤。<code>Web</code> 开发人员不需要在其使用的 <code>API</code> 中做任何更改来利用 <code>HTTP</code> 帧；当浏览器和服务器都可用时，<code>HTTP/2</code> 将被打开并使用。</p><p><img src="C:\Users\NXD006\Desktop\微信图片_20221005185911.png"></p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005191720319.png" alt="image-20221005191720319"></p><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p><code>HTTPS</code> 也是通过 <code>HTTP</code> 协议进行传输信息，但是采用了 <code>TLS</code> 协议进行了加密</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。但是因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>公钥大家都知道，可以用公钥加密数据。但解密数据必须使用私钥，私钥掌握在颁发公钥的一方。首先服务端将公钥发布出去，那么客户端是知道公钥的。然后客户端创建一个秘钥，并使用公钥加密，发送给服务端。服务端接收到密文以后通过私钥解密出正确的秘钥。</p><h3 id="TSL握手过程"><a href="#TSL握手过程" class="headerlink" title="TSL握手过程"></a>TSL握手过程</h3><p>TSL握手的过程采用的是非对称加密</p><ul><li><code>Client Hello</code>: 客户端发送一个随机值(<code>Random1</code>)以及需要的协议和加密方式。</li><li><code>Server Hello</code> 以及 <code>Certificate</code>: 服务端收到客户端的随机值，自己也产生一个随机值(<code>Random2</code>)，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）</li><li><code>Certificate Verify</code>: 客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值(<code>Random3</code>)，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li><li><code>Server 生成 secret</code>: 服务端收到加密过的随机值并使用私钥解密获得第三个随机值(<code>Random3</code>)，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li></ul><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221006114815008.png" alt="https请求全流程"></p><h2 id="http-缓存"><a href="#http-缓存" class="headerlink" title="http 缓存"></a>http 缓存</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><p>强缓存主要由Cache-control和Expires两个Header决定的</p><p>Expires的值和头里边的Date属性的值来判断是否缓存还效。Expires是Web服务器响应消息头字段,在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据,而无需再次请求.<code>Expires</code> 的一个缺点就是，返回的到期时间是服务器端的时间，这是一个绝对的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大（比如时钟不同步，或者跨时区），那么误差就很大。</p><p><code>Cache-Control</code> 指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。但是其设置的是一个相对时间。指定过期时间：<code>max-age</code> 是距离请求发起的时间的秒数。</p><h5 id="私有和公共缓存"><a href="#私有和公共缓存" class="headerlink" title="私有和公共缓存"></a>私有和公共缓存</h5><p><code>public</code> 表示响应可以被任何中间人（比如中间代理、<code>CDN</code> 等缓存） 而 <code>private</code> 则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。</p><p><code>Cache-control</code> 优先级比 <code>Expires</code> 优先级高</p><p>Cache-Control强缓存的过程</p><ul><li>首次请求，直接从server中获取。其中会设置max-age&#x3D;100</li><li>第二次请求，age&#x3D;10，小于100，则命中Cache,直接返回</li><li>第三次请求，age&#x3D;110，大于110。强缓存失效，就需要再次请求Server</li></ul><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005194035477.png" alt="强缓存"></p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><ul><li><p>If-Modified-Since–Last-Modified</p><p>Last-Modified表示本地文件最后修改日期，浏览器会在request header加上If-Modified-Since(上次返回的Last-Modified的值)，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</p><p>但是如果在本地打开缓存文件，就会造成Last-Modified被修改,所以在HTTP&#x2F;1.1出现了ETag</p></li><li><p>If-none-match-Etags</p><p><code>Etag</code> 就像一个指纹，资源变化都会导致 <code>ETag</code> 变化，跟最后修改时间没有关系，<code>ETag</code> 可以保证每一个资源是唯一的。<code>If-None-Match</code> 的 <code>header</code> 会将上次返回的 <code>Etag</code> 发送给服务器，询问该资源的 <code>Etag</code> 是否有更新，有变动就会发送新的资源回来</p><p>If-none-match、ETags优先级高于If-Modified-Since、Last-Modified</p><p>第一次请求:</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005194832245.png" alt="image-20221005194832245"></p></li></ul><p>第二次请求相同网页：</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005195009100.png" alt="image-20221005195009100"></p><p>协商缓存，假设没有改动的话，返回304，改动了返回200</p><ul><li>200：强缓存 <code>Expires/Cache-Control</code> 失效时，返回新的资源文件</li><li>200 <code>(from cache)</code>: 强缓 <code>Expires/Cache-Control</code> 两者都存在，未过期，<code>Cache-Control</code> 优先 <code>Expires</code> 时，浏览器从本地获取资源成功</li><li>304 <code>(Not Modified)</code>：协商缓存 <code>Last-modified/Etag</code> 没有过期时，服务端返回状态码304</li></ul><p>现在的200<code>(from cache)</code>已经变成了 <code>disk cache</code>(磁盘缓存)和 <code>memory cache</code>(内存缓存)两种</p><h4 id="revving技术"><a href="#revving技术" class="headerlink" title="revving技术"></a>revving技术</h4><p><code>web</code> 开发者发明了一种被 <code>Steve Souders</code> 称之为 <code>revving</code> 的技术。不频繁更新的文件会使用特定的命名方式：在 <code>URL</code> 后面（通常是文件名后面）会加上版本号。</p><p>弊端：更新了版本号，所有引用这些的资源的地方的版本号都要改变</p><p><code>web</code> 开发者们通常会采用自动化构建工具在实际工作中完成这些琐碎的工作。当低频更新的资源（<code>js/css</code>）变动了，只用在高频变动的资源文件（<code>html</code>）里做入口的改动。</p><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p><code>HTTP Cookie</code>（也叫 <code>Web Cookie</code> 或浏览器 <code>Cookie</code>）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><h3 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h3><p><code>Set-Cookie</code> 响应头部和 <code>Cookie</code> 请求头部</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005195644856.png" alt="image-20221005195644856"></p><h3 id="会话期cookie"><a href="#会话期cookie" class="headerlink" title="会话期cookie"></a>会话期cookie</h3><p>会话期Cookie是最简单的 <code>Cookie</code>：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。会话期 <code>Cookie</code> 不需要指定过期时间（<code>Expires</code>）或者有效期（<code>Max-Age</code>）。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期 <code>Cookie</code> 也会被保留下来，就好像浏览器从来没有关闭一样</p><h3 id="持久性cookie"><a href="#持久性cookie" class="headerlink" title="持久性cookie"></a>持久性cookie</h3><p>和关闭浏览器便失效的会话期 <code>Cookie</code> 不同，持久性 <code>Cookie</code> 可以指定一个特定的过期时间（<code>Expires</code>）或有效期（<code>Max-Age</code>）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> id<span class="token operator">=</span>a3fWa<span class="token punctuation">;</span> Expires<span class="token operator">=</span>Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Cookie的secure和HttpOnly标记"><a href="#Cookie的secure和HttpOnly标记" class="headerlink" title="Cookie的secure和HttpOnly标记"></a>Cookie的secure和HttpOnly标记</h3><p>标记为Secure的cookie只应通过被https协议加密的请求发送服务端</p><p>标记为Secure的Cookie只应通过被https协议加密过的请求发送到服务端。但即便设置了 <code>Secure</code> 标记，敏感信息也不应该通过 <code>Cookie</code> 传输，因为 <code>Cookie</code> 有其固有的不安全性，<code>Secure</code> 标记也无法提供确实的安全保障</p><p>通过 <code>JavaScript</code> 的 <code>Document.cookie</code> <code>API</code> 是无法访问带有 <code>HttpOnly</code> 标记的 <code>cookie</code>。这么做是为了避免跨域脚本攻击（<code>XSS</code>）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Set<span class="token operator">-</span>Cookie<span class="token operator">:</span> id<span class="token operator">=</span>a3fWa<span class="token punctuation">;</span> Expires<span class="token operator">=</span>Wed<span class="token punctuation">,</span> <span class="token number">21</span> Oct <span class="token number">2015</span> <span class="token number">07</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span><span class="token punctuation">;</span> Secure<span class="token punctuation">;</span> HttpOnly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Cookie的作用域"><a href="#Cookie的作用域" class="headerlink" title="Cookie的作用域"></a>Cookie的作用域</h3><p><code>Domain</code> 和 <code>Path</code> 标识定义了 <code>Cookie</code> 的作用域：即 <code>Cookie</code> 应该发送给哪些 <code>URL</code>。</p><p><code>Domain</code> 标识指定了哪些主机可以接受 <code>Cookie</code>。如果不指定，默认为当前的主机（不包含子域名）。如果指定了 <code>Domain</code>，则一般包含子域名。</p><p>例如，如果设置 <code>Domain=mozilla.org</code>，则 <code>Cookie</code> 也包含在子域名中（如<code>developer.mozilla.org</code>）。</p><p><code>Path</code> 标识指定了主机下的哪些路径可以接受 <code>Cookie</code>（该 <code>URL</code> 路径必须存在于请求 <code>URL</code> 中）。以字符 %x2F (“&#x2F;“) 作为路径分隔符，子路径也会被匹配。</p><h3 id="SameSite-Cookies"><a href="#SameSite-Cookies" class="headerlink" title="SameSite Cookies"></a>SameSite Cookies</h3><p><code>SameSite Cookie</code> 允许服务器要求某个 <code>cookie</code> 在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击</p><ul><li><code>None</code> 浏览器会在同站请求、跨站请求下继续发送 <code>cookies</code>，不区分大小写。</li><li><code>Strict</code> 浏览器将只在访问相同站点时发送 <code>cookie</code>。</li><li><code>Lax</code> 将会为一些跨站子请求保留，如图片加载或者 <code>frames</code> 的调用，但只有当用户从外部站点导航到 <code>URL</code> 时才会发送。如 <code>link</code> 链接<code>Lax</code> 将会为一些跨站子请求保留，如图片加载或者 <code>frames</code> 的调用，但只有当用户从外部站点导航到 <code>URL</code> 时才会发送。如 <code>link</code> 链接</li></ul><h4 id="None-Strict-Lax"><a href="#None-Strict-Lax" class="headerlink" title="None Strict Lax"></a>None Strict Lax</h4><p>在新版本的浏览器（<code>Chrome 80</code> 之后）中，<code>SameSite</code> 的默认属性是 <code>SameSite=Lax</code>。换句话说，当 <code>Cookie</code> 没有设置 <code>SameSite</code> 属性时，将会视作 <code>SameSite</code> 属性被设置为 <code>Lax</code> —— 这意味着 <code>Cookies</code> 将不会在当前用户使用时被自动发送。如果想要指定 <code>Cookies</code> 在同站、跨站请求都被发送，那么需要明确指定<code>SameSite</code> 为 <code>None</code>。因为这一点，我们需要好好排查旧系统是否明确指定 <code>SameSite</code>，以及推荐新系统明确指定 <code>SameSite</code>，以兼容新旧版本 <code>Chrome</code></p><h2 id="http访问控制（CORS"><a href="#http访问控制（CORS" class="headerlink" title="http访问控制（CORS)"></a>http访问控制（CORS)</h2><p>跨域资源共享（<code>CORS</code>）是一种机制，它使用额外的 <code>HTTP</code> 头告诉浏览器，让运行在一个 <code>origin</code> (<code>domain</code>) 上的 <code>web</code> 应用被准许访问来自不同源服务器上的指定的资源</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005201020822.png" alt="image-20221005201020822"></p><p>跨域资源共享标准新增了一组 <code>HTTP</code> 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>简单请求（不会触发 <code>CORS</code> 的预检请求）需要同时满足以下三点：</p><ul><li><p>方法是 <code>GET/HEAD/POST</code> 之一</p></li><li><p><code>Content-Type</code> 的值仅限 <code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code> 三者之一</p></li><li><pre><code>HTTP` 头部不能超过以下字段：`Accept`、`Accept-Language`、`Content-Language``Content-Type`（需要注意额外的限制）`DPR`、`Downlink`、`Save-Data`、`Viewport-Width`、`Width</code></pre></li></ul><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005201224114.png" alt="image-20221005201224114"></p><p>简化如下：</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005201257061.png" alt="image-20221005201257061"></p><p>请求首部字段 <code>Origin</code> 表明该请求来源于 <code>http://foo.example</code></p><p>本例中，服务端返回的 <code>Access-Control-Allow-Origin: *</code> 表明，该资源可以被任意外域访问。如果服务端仅允许来自 <code>http://foo.example</code> 的访问，该首部字段的内容如下：</p><p>Access-Control-Allow-Origin: <a href="http://foo.example/">http://foo.example</a></p><p><code>Access-Control-Allow-Origin</code> 应当为 * 或者包含由 <code>Origin</code> 首部字段所指明的域名。</p><h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>规范要求，对那些可能对服务器数据产生副作用的 <code>HTTP</code> 请求方法。浏览器必须首先使用 <code>OPTIONS</code> 方法发起一个预检请求（<code>preflight request</code>），从而获知服务端是否允许该跨域请求。</p><p>服务器确认允许之后，才发起实际的 <code>HTTP</code> 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 <code>Cookies</code> 和 <code>HTTP</code> 认证相关数据）</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005201433771.png" alt="image-20221005201433771"></p><p>预检请求中同时携带了下面两个首部字段：</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005201457898.png" alt="image-20221005201457898"></p><p>首部字段 <code>Access-Control-Request-Method</code> 告知服务器，实际请求将使用 <code>POST</code> 方法。首部字段 <code>Access-Control-Request-Headers</code> 告知服务器，实际请求将携带两个自定义请求首部字段：<code>X-PINGOTHER</code> 与 <code>Content-Type</code>。服务器据此决定，该实际请求是否被允许。</p><p>预检请求的响应中，包括了以下几个字段</p><p><img src="C:\Users\NXD006\AppData\Roaming\Typora\typora-user-images\image-20221005201541209.png" alt="image-20221005201541209"></p><p>HTTP 请求和响应 一般而言，对于跨域 <code>XMLHttpRequest</code> 或 <code>Fetch</code> 请求，浏览器不会发送身份凭证信息。如果要发送凭证信息，需要设置 <code>XMLHttpRequest</code> 的某个特殊标志位。比如说 <code>XMLHttpRequest</code> 的 <code>withCredentials</code> 标志设置为 <code>true</code>，则可以发送 <code>cookie</code> 到服务端。</p><p>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin</code> 的值为“<em>”。这是因为请求的首部中携带了 <code>Cookie</code> 信息，如果 <code>Access-Control-Allow-Origin</code> 的值为“</em>”，请求将会失败。而将 <code>Access-Control-Allow-Origin</code> 的值设置为 <code>http://foo.example</code>，则请求将成功执行。</p><h3 id="CORS-涉及到的请求和响应头如下："><a href="#CORS-涉及到的请求和响应头如下：" class="headerlink" title="CORS 涉及到的请求和响应头如下："></a><code>CORS</code> 涉及到的请求和响应头如下：</h3><h4 id="HTTP响应首部字段"><a href="#HTTP响应首部字段" class="headerlink" title="HTTP响应首部字段"></a>HTTP响应首部字段</h4><ul><li><p><code>Access-Control-Allow-Origin</code> 允许访问该资源的外域 <code>URI</code>。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p></li><li><p><code>Access-Control-Expose-Headers</code> 头让服务器把允许浏览器访问的头放入白名单</p></li><li><p><code>Access-Control-Max-Age</code> 头指定了 <code>preflight</code> 请求的结果能够被缓存多久</p></li><li><p><code>Access-Control-Allow-Credentials</code> 头指定了当浏览器的 <code>credentials</code> 设置为 <code>true</code> 时是否允许浏览器读取 <code>response</code> 的内容。</p></li><li><p><code>Access-Control-Allow-Methods</code> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 <code>HTTP</code> 方法。</p></li><li><p><code>Access-Control-Allow-Headers</code> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p><h4 id="HTTP-请求首部字段"><a href="#HTTP-请求首部字段" class="headerlink" title="HTTP 请求首部字段"></a>HTTP 请求首部字段</h4><ul><li><code>Origin</code> 首部字段表明预检请求或实际请求的源站</li><li><code>Access-Control-Request-Method</code> 首部字段用于预检请求。其作用是，将实际请求所使用的 HTTP 方法告诉服务器。</li><li><code>Access-Control-Request-Headers</code> 首部字段用于预检请求。其作用是，将实际请求所携带的首部字段告诉服务器。</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/30/hello-world/"/>
      <url>/2022/09/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
